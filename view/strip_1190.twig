{% extends "strip.twig" %}

{% block head %}
<style>
#controllPanel{
    max-width:553px; margin:0 auto; position:relative; font-size:12px !important;text-align:left;
}
#controllPanel button, #controllPanel input{
    font-size:10px;
}
#controllPanel button{
    padding-left:5px;
    padding-right:5px;
}
</style>
{% endblock %}

{% block comic %}

<img id="frame" src="/s/1190/30/3099.png" style="max-height:{{strip.height}}px" alt="{{strip.title}}" title="{{strip.caption}}">

<div id="controllPanel">

<div style="margin-bottom:4px">
<input id="slider" style="width:100%;" type="range" min="1" max="3099" value="3099">
<button id="toFirst" onclick="player.setProgress(1);">|◀◀</button>
<button id="stepBackBtn" onclick="player.stepFrame(-1);">|◀</button>
<input id="progress" value="1" size="4" maxlength="4">
<button id="playBtn" onclick="player.togglePlay();">▶</button>
<button id="stepForwardBtn" onclick="player.stepFrame(1);">▶|</button>
<button id="toLast" onclick="player.setProgress(player.maxProgress);">▶▶|</button>

<span id="time" style="float:right"></span>

</div>

<div style="margin-bottom:4px">
<button id="spd1" onclick="player.setSpeed(1.3)">1x</button>
<button id="spd3" onclick="player.setSpeed(2.6)">2x</button>
<button id="spd5" onclick="player.setSpeed(6.5)">5x</button>
<button id="spd10" onclick="player.setSpeed(13)">10x</button>
</div>

<div>
章節<br>
<button id="ch1" onclick="player.setProgress(1)">沙堡</button>
<button id="ch2" onclick="player.setProgress(972)">旅程</button>
<button id="ch3" onclick="player.setProgress(2651)">部落</button>
<button id="ch4" onclick="player.setProgress(2926)">救鄉</button>
</div>
</div>


<img id="preloader" style="position:absolute;left:-10000px" alt="" src="">

<script type="text/javascript"><!--

progress = document.getElementById('progress')
slider = document.getElementById('slider')
playBtn = document.getElementById('playBtn')
time = document.getElementById('time')
preloader = document.getElementById('preloader')
frame = document.getElementById('frame')

window.player = {
    defaultSpeed: 1.3,
    maxProgress: 3099,

    speed: 0,    // frame per second
    progress: 1, // current frame
    pauseReason: 'stopped',

    nextStep: false,

    togglePlay: function(){
        if (this.speed <= 0) {
            this.play()
        } else {
            this.pause()
        }
    },

    play: function(){
        if (this.speed <= 0) {
            this.speed = this.defaultSpeed
            this.stepFrame()
        }
        this.pauseReason = false
        playBtn.textContent = '❙❙'
    },

    setSpeed: function(s){
        this.defaultSpeed = s
        this.speed = this.speed ? s : 0
    },

    stepFrame: function(direction) {
        let start = Date.now()
        this.progress += (direction < 0) ? -1 : 1

        if (this.progress > this.maxProgress) {
            this.progress = this.maxProgress - 4
        }
        if (this.progress <= 0) {
            this.progress = 1
        }

        this.setProgress(this.progress)
        frame.id = this.progress
        let selfId = this.progress

        if (this.speed > 0 && !direction) {
            let interval = 1000 / this.speed
            if (this.progress >= 2441 && this.progress <= 2445) {
                interval /= 20 // shooting star!
            }

            frame.onload = function(){
                frame.onload = null
                interval -= Date.now() - start
                this.nextStep = setTimeout(function(){
                    if (selfId === parseInt(frame.id)) {
                        player.stepFrame.bind(player)()
                    }
                }, Math.max(interval,0))
            }
        }
    },

    pause: function(reason){
        if (this.nextStep) {
            clearTimeout(this.nextStep)
            this.nextStep = false
        }

        if (this.speed > 0) {
            this.speed = 0
            this.pauseReason = reason || false
        }

        playBtn.textContent = '▶'
    },

    unpause: function(reason){
        if (!reason || reason == this.pauseReason) {
            this.play()
            this.pauseReason = false
        }
    },

    setProgress: function(p){
        p = parseInt(p)

        if (isNaN(p)) {
            this.showProgress()
            return
        }

        if (p > this.maxProgress) {
            p = this.maxProgress
        } else if (p < 1) {
            p = 1
        }
        this.progress = p
        this.showProgress()
        this.showImage(this.progress)
        this.preloadImage(Math.min(this.progress + 1, this.maxProgress))
    },

    showProgress: function(){
        progress.value = this.progress
        slider.value = this.progress

        let secLeft = (this.maxProgress - this.progress - 4) / this.defaultSpeed
        secLeft = Math.max(0, secLeft)
        let min = (parseInt(secLeft/60) + "").padStart(2, "0")
        let sec = (parseInt(secLeft%60) + "").padStart(2, "0")
        time.textContent = `-${min}:${sec}`
    },

    preloadImage: function(id){
        preloader.src = this.id2path(id)
        preloader.dataset.id = id
    },

    showImage: function(id){
        frame.src = this.id2path(id)
    },

    id2path: function(id){
        let dir = (parseInt(id/100)+"").padStart(2, "0")
        let file = (id+"").padStart(4, "0")
        return `/s/1190/${dir}/${file}.png`
    }
}

slider.addEventListener('input', function(){
    player.pause('slider')
    player.setProgress(this.value)
})
slider.addEventListener('change', function(){
    player.unpause('slider')
})
progress.addEventListener('change', function(){
    player.setProgress(this.value)
})
progress.addEventListener('focus', function(){
    player.pause('progress-focus')
})

player.setProgress(player.maxProgress)
player.togglePlay()

--></script>

{% endblock %}